class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        queue<pair<TreeNode*,int>>q;
        pair<TreeNode*,int>p;
        p=make_pair(root,0);
        q.push(p);
        vector<vector<int>>v;
        vector<int>k;
        int prev=-1;
        if(root==NULL)
            return v;
        while(!q.empty())//Using a queue and inserting left and right child of current node while maintaining the level of the node..same as breadth first..
        {
            p=q.front();
            q.pop();
            int lev=p.second;
            if(prev!=lev)
            {
                if(k.size()>0)
                {
                    v.push_back(k);
                    k.resize(0);
                }
            }
            k.push_back(p.first->val);
            prev=lev;
            if(p.first->left!=NULL)
                q.push(make_pair(p.first->left,lev+1));
            if(p.first->right!=NULL)
                q.push(make_pair(p.first->right,lev+1));
        }
        v.push_back(k);
        reverse(v.begin(),v.end());
        return v;
    }
};
//Time complexity:O(n)
//Space complexity:O(n)
